// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: emo_ana.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmoAnaServiceClient is the client API for EmoAnaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmoAnaServiceClient interface {
	UserLogin(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetailResponse, error)
	UserRegister(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetailResponse, error)
	GetEmoana(ctx context.Context, in *GetEmoanaRequest, opts ...grpc.CallOption) (*GetEmoanaResponse, error)
}

type emoAnaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmoAnaServiceClient(cc grpc.ClientConnInterface) EmoAnaServiceClient {
	return &emoAnaServiceClient{cc}
}

func (c *emoAnaServiceClient) UserLogin(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.EmoAnaService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoAnaServiceClient) UserRegister(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.EmoAnaService/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoAnaServiceClient) GetEmoana(ctx context.Context, in *GetEmoanaRequest, opts ...grpc.CallOption) (*GetEmoanaResponse, error) {
	out := new(GetEmoanaResponse)
	err := c.cc.Invoke(ctx, "/proto.EmoAnaService/GetEmoana", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmoAnaServiceServer is the server API for EmoAnaService service.
// All implementations must embed UnimplementedEmoAnaServiceServer
// for forward compatibility
type EmoAnaServiceServer interface {
	UserLogin(context.Context, *UserRequest) (*UserDetailResponse, error)
	UserRegister(context.Context, *UserRequest) (*UserDetailResponse, error)
	GetEmoana(context.Context, *GetEmoanaRequest) (*GetEmoanaResponse, error)
	mustEmbedUnimplementedEmoAnaServiceServer()
}

// UnimplementedEmoAnaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmoAnaServiceServer struct {
}

func (UnimplementedEmoAnaServiceServer) UserLogin(context.Context, *UserRequest) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedEmoAnaServiceServer) UserRegister(context.Context, *UserRequest) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedEmoAnaServiceServer) GetEmoana(context.Context, *GetEmoanaRequest) (*GetEmoanaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmoana not implemented")
}
func (UnimplementedEmoAnaServiceServer) mustEmbedUnimplementedEmoAnaServiceServer() {}

// UnsafeEmoAnaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmoAnaServiceServer will
// result in compilation errors.
type UnsafeEmoAnaServiceServer interface {
	mustEmbedUnimplementedEmoAnaServiceServer()
}

func RegisterEmoAnaServiceServer(s grpc.ServiceRegistrar, srv EmoAnaServiceServer) {
	s.RegisterService(&EmoAnaService_ServiceDesc, srv)
}

func _EmoAnaService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoAnaServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmoAnaService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoAnaServiceServer).UserLogin(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmoAnaService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoAnaServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmoAnaService/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoAnaServiceServer).UserRegister(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmoAnaService_GetEmoana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmoanaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoAnaServiceServer).GetEmoana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmoAnaService/GetEmoana",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoAnaServiceServer).GetEmoana(ctx, req.(*GetEmoanaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmoAnaService_ServiceDesc is the grpc.ServiceDesc for EmoAnaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmoAnaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EmoAnaService",
	HandlerType: (*EmoAnaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _EmoAnaService_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _EmoAnaService_UserRegister_Handler,
		},
		{
			MethodName: "GetEmoana",
			Handler:    _EmoAnaService_GetEmoana_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emo_ana.proto",
}
